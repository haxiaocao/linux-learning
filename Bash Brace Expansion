1. curly braces {}, ${}
"${foo}bar"
 expanding array elements, as in ${array[42]}
 using parameter expansion operations, as in ${filename%.*} (remove extension)
 expanding positional parameters beyond 9: "$8 $9 ${10} ${11}"
Doing this everywhere, instead of just in potentially ambiguous cases, can be considered good programming practice. This is both for consistency and to avoid surprises like $foo_$bar.jpg, where it's not visually obvious that the underscore becomes part of the variable name.
 
2.${command}
   ${command} is equalant to `command`(backstick) character.
 
3. Bash brace expansion is used to generate stings at the command line or in a shell script. The syntax for brace expansion consists of either a sequence specification or a comma separated list of items inside curly braces "{}". A sequence consists of a starting and ending item separated by two periods "..".

Some examples and what they expand to:

  {aa,bb,cc,dd}  => aa bb cc dd
  {0..12}        => 0 1 2 3 4 5 6 7 8 9 10 11 12
  {3..-2}        => 3 2 1 0 -1 -2
  {a..g}         => a b c d e f g
  {g..a}         => g f e d c b a

If the brace expansion has a prefix or suffix string then those strings are included in the expansion:

  a{0..3}b       => a0b a1b a2b a3b

Brace expansions can be nested:

  {a,b{1..3},c}  => a b1 b2 b3 c

i.e in the loops, and it is in sequence:
for i in {0..19}
do
    echo $i
done

i.e , when you can handle some files,in the same directory:
rm /xxx/path/foo /a/xxx/path/bar
It is can be sustitued by this command:
rm /xxx/path/{foo,bar}
